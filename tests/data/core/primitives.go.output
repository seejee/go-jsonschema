// Code generated by github.com/seejee/go-jsonschema, DO NOT EDIT.

package test

import "fmt"
import "encoding/json"

type Primitives struct {
	// MyArray corresponds to the JSON schema field "myArray".
	MyArray []string `json:"myArray,omitempty"`

	// MyBoolean corresponds to the JSON schema field "myBoolean".
	MyBoolean *bool `json:"myBoolean,omitempty"`

	// MyInteger corresponds to the JSON schema field "myInteger".
	MyInteger *int `json:"myInteger,omitempty"`

	// MyMap corresponds to the JSON schema field "myMap".
	MyMap PrimitivesMyMap `json:"myMap,omitempty"`

	// MyNull corresponds to the JSON schema field "myNull".
	MyNull interface{} `json:"myNull,omitempty"`

	// MyNumber corresponds to the JSON schema field "myNumber".
	MyNumber *float64 `json:"myNumber,omitempty"`

	// MyString corresponds to the JSON schema field "myString".
	MyString *string `json:"myString,omitempty"`
}

type PrimitivesMyMap map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Primitives) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	type Plain Primitives
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if plain.MyNull != nil {
		return fmt.Errorf("field %s: must be null", "myNull")
	}
	*j = Primitives(plain)
	return nil
}
